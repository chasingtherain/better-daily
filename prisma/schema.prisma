generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  emailVerified       DateTime?
  image               String?
  name                String?
  authPartner         String?
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")
  accounts            Account[]
  entries             Entry[]
  sessions            Session[]
  feedback            Feedback[]
  loveLanguageEntries LoveLanguageEntry[]
  lifeExperienceEntries LifeExperienceEntry[]
  @@map("users")
}

model Entry {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  todayDate          String
  gratefulContent    String[]
  focusContent       String[]
  wentWellContent    String[]
  notSoWellContent   String[]
  improvementContent String[]
  effortRating       Int?     @default(0)
  authorId           String
  author             User     @relation(fields: [authorId], references: [id])
}

model LifeExperienceEntry {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  year               String?
  misogiContent      String?
  adventureContent   String[]
  authorId           String
  author             User     @relation(fields: [authorId], references: [id])
}

model LoveLanguageEntry {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  todayDate          String
  service            Int?     @default(0)
  gift               Int?     @default(0)
  touch              Int?     @default(0)
  time               Int?     @default(0)
  words              Int?     @default(0)
  authorId           String
  author             User     @relation(fields: [authorId], references: [id])
}

model Feedback {
  id                  String    @default(cuid()) @id
  createdAt           DateTime  @default(now()) @map(name: "created_at")
  feedbackContent     String
  channel             String?
  nps                 Int?
  authorId            String
  author              User?     @relation(fields: [authorId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
